C <- 6/2.5
C
#multiplicacion
D <- 6*2.5
D
# Modulo
E <- 7%%2
E
A <- 1
class(A)
typeof(A)
class(A) <- "nueva_clase"
class(A)
typeof(A) <- "nuevo_tipo"
A <- 1L
A
class(A)
typeof(A)
A <- 2+2i
A
class(A)
typeof(A)
A <-  paste('Soy', 'una', 'concatenación', 'de', 'caracteres', sep = " ")
A
class(A)
typeof(A)
A <- factor("Soy un factor con niveles fijos")
A
class(A)
typeof(A)
A <- factor(c("R","Weka","SPSS","SAS","R"))
A
class(A)
typeof(A)
# ¿Cuále son sus niveles?
levels(A)
# ¿Está ordenado?
is.ordered(A)
A <- factor(c("R","Weka","SPSS","SAS","R"), ordered = TRUE)
A
class(A)
typeof(A)
# ¿Cuáles son sus niveles?
levels(A)
# ¿Está ordenado?
is.ordered(A)
# ¿Podemos cambiar el orden de los niveles?
A <- factor(c("R","Weka","SPSS","SAS","R"), ordered = TRUE, levels = c("SPSS","SAS","Weka","R"))
A
A <- TRUE
class(A)
typeof(A)
A <- as.Date("2017-01-01")
class(A)
typeof(A)
C <- c(1, 3, 4)
C
typeof(C)
class(C)
# ¿Qué longitud tiene?
length(C)
# ¿Cuáles son sus dimensiones?
dim(C)
C <- C + 2
C
D <- C + 1:3 #esto es equivalente a hacer 3+1, 5+2, 6+9
D
v1 <- c(10,20,30,40,50,60)
v2 <- c(1,2,3)
v3 <- v1 + v2
v3
# ¿Qué pasa si el vector más pequeño no es multiplo del más grande?
v2 <- c(1,2,3,4)
v3 <- v1 + v2
v3
E <- c("Julia","Hadley","Guido")
E
elemento2 <- E[2]
elemento2
rm(elemento2)
elemento2
E[2] <- "Pablo"
E
# Esta forma de construir la matriz es por columnas por default
M <- matrix(1:9, nrow = 3, ncol = 3)
M
typeof(M)
class(M)
# ¿Qué longitud tiene?
length(M)
# ¿Cuáles son sus dimensiones?
dim(M)
v1 <- c(1,2,3)
v2 <- c(4,5,6)
# Creamos la matriz uniendo los dos vectores con cbind()
M <- cbind(v1,v2)
M
typeof(M)
class(M)
# ¿Qué longitud tiene?
length(M)
# ¿Cuáles son sus dimensiones?
dim(M)
v3 <- c("a","b","c")
M <- cbind(M,v3)
M
typeof(M)
class(M)
INDICE  <- c(100,   100,   100,
101.8, 101.2, 100.73,
102.9, 102.4, 103.2)
FECHA  <-  c("Oct-16", "Oct-16", "Oct-16",
"Nov-16", "Nov-16", "Nov-16",
"Dic-16", "Dic-16", "Dic-16")
GRUPO  <-  c("Privado_Registrado","Público","Privado_No_Registrado",
"Privado_Registrado","Público","Privado_No_Registrado",
"Privado_Registrado","Público","Privado_No_Registrado")
Datos <- data.frame(INDICE, FECHA, GRUPO)
Datos
Datos$FECHA
Datos[3,2]
Datos$FECHA[3]
Datos$FECHA[3,2]
superlista <- list(A,B,C,D,E,FECHA, DF = Datos, INDICE, GRUPO)
superlista
superlista$DF$FECHA[2]
for(i in 1:10){
Cuadrados<- i^2
print(Cuadrados)
}
Datos
unique(Datos$GRUPO)
for(variable in unique(Datos$GRUPO)){
print(Datos[Datos$GRUPO == variable,])
}
A <- 'Esto no es una cadena de caracteres'
B <- factor('Esto no es una cadena de caracteres')
# Condicional simple
if (class(A) == "character") {
paste0("No le crean, esto es una cadena de caracteres")
}
# Condicional simple
if (class(B) == "character") {
paste0("No le crean, esto es una cadena de caracteres")
}
# Condicional exhaustivo
if (class(B) == "character") {
paste0("No le crean, esto es una cadena de caracteres")
} else {paste0("Esta chequeado, esto NO es una cadena de caracteres")}
ifelse(test = class(A) == "character", yes =  paste0("Esto es un caracter"),
no = paste0("Esto no era un caracter"))
funcion_prueba <- function(a,b) {
print(paste(a, b, sep = " "))
}
funcion_prueba(a = "Soy la primera parte de un string.", b = "Y yo la segunda parte")
funcion_prueba <- function(a = "Soy un default.",b) {
print(paste(a, b, sep = " "))
}
funcion_prueba(b = " A mi me tenes que asignar")
funcion_prueba(a='Lo puedo asignar?', b='Obvio')
m1 <- matrix(c(9,2,4,8), nrow = 2, ncol = 2)
m2 <- matrix(c(10,1,5,7,9,17), nrow = 3, ncol = 2)
(function(x) x*2)(10)
# Armamos un dataframe con la recaudación en millones de dolares de la trilogía de Batman de Nolan
USA  <- c(207,   535,   448)
Mundo <- c(167,   470,   636)
pelis  <-  c("Batman Begins", "Dark Knight", "Dark Knight Rises")
batman <- data.frame(USA, Mundo, row.names = pelis)
batman
# ¿Cuanto recaudó cada película?
apply(X=batman, MARGIN =1 , FUN=sum)
# ¿Cuanto recaudó en promedio la trilogía por área?
apply(X=batman, MARGIN =2 , FUN=mean)
# ¿Cuanto recaudó cada película en pesos argentinos?
apply(X=batman, MARGIN =1 , FUN=sum*30.4)
# Funciones anónimas al rescate
apply(X=batman, MARGIN =1 , FUN=function(x) sum(x)*30.4)
x <- 1:15
y <- list(a = 1, b = TRUE, c = "oops")
#Para guardar
save(x, y, file = "xy.RData")
#Para leer
load('xy.RData')
x
saveRDS(x, "x.RDS")
Z <- readRDS("x.RDS")
Z
individual_t117 <- read.table('../Fuentes/usu_individual_t117.txt',sep=";", dec=",", header = TRUE, fill = TRUE)
individual_t117
# install.packages("xlsx") # por única vez
library(xlsx) #activamos la librería
#creamos una tabla cualquiera de prueba
x <- 1:10
y <- 11:20
tabla_de_R <- data.frame(x,y)
# escribimos el archivo
write.xlsx( x = tabla_de_R, file = "archivo.xlsx",sheetName = "hoja 1",row.names = FALSE)
#leemos el archivo
tabla <- read.xlsx(file = "archivo.xlsx",sheetName = "hoja 1")
tabla
#install.packages(rstudioapi)
script.dir <- paste0(dirname(rstudioapi::getActiveDocumentContext()$path),"/")
bases.dir  <-  paste0(dirname(script.dir),"/Fuentes/")
#dir.create(bases.dir)
resultados.dir <- paste0(dirname(script.dir),"/Resultados/")
#dir.create(resultados.dir)
#chequeo
dir.exists(bases.dir)
dir.exists(resultados.dir)
rm(list=ls())
A <- 1
A
B = 2
B
A <- B
A   #Ahora A toma el valor de B, y B continua conservando el mismo valor
B
A = 1
B = 2
A >  B
A >= B
A <  B
A <= B
A == B
A != B
C <- A != B
C
#suma
A <- 5+6
A
#Resta
B <- 6-8
B
#cociente
C <- 6/2.5
C
#multiplicacion
D <- 6*2.5
D
# Modulo
E <- 7%%2
E
A <- 1
class(A)
typeof(A)
class(A) <- "nueva_clase"
class(A)
typeof(A) <- "nuevo_tipo"
A <- 1L
A
class(A)
typeof(A)
A <- 2+2i
A
class(A)
typeof(A)
A <-  paste('Soy', 'una', 'concatenación', 'de', 'caracteres', sep = " ")
A
class(A)
typeof(A)
A <- factor("Soy un factor con niveles fijos")
A
class(A)
typeof(A)
A <- factor(c("R","Weka","SPSS","SAS","R"))
A
class(A)
typeof(A)
# ¿Cuále son sus niveles?
levels(A)
# ¿Está ordenado?
is.ordered(A)
A <- factor(c("R","Weka","SPSS","SAS","R"), ordered = TRUE)
A
class(A)
typeof(A)
# ¿Cuáles son sus niveles?
levels(A)
# ¿Está ordenado?
is.ordered(A)
# ¿Podemos cambiar el orden de los niveles?
A <- factor(c("R","Weka","SPSS","SAS","R"), ordered = TRUE, levels = c("SPSS","SAS","Weka","R"))
A
A <- TRUE
class(A)
typeof(A)
A <- as.Date("2017-01-01")
class(A)
typeof(A)
C <- c(1, 3, 4)
C
typeof(C)
class(C)
# ¿Qué longitud tiene?
length(C)
# ¿Cuáles son sus dimensiones?
dim(C)
C <- C + 2
C
D <- C + 1:3 #esto es equivalente a hacer 3+1, 5+2, 6+9
D
v1 <- c(10,20,30,40,50,60)
v2 <- c(1,2,3)
v3 <- v1 + v2
v3
# ¿Qué pasa si el vector más pequeño no es multiplo del más grande?
v2 <- c(1,2,3,4)
v3 <- v1 + v2
v3
E <- c("Julia","Hadley","Guido")
E
elemento2 <- E[2]
elemento2
rm(elemento2)
elemento2
E[2] <- "Pablo"
E
# Esta forma de construir la matriz es por columnas por default
M <- matrix(1:9, nrow = 3, ncol = 3)
M
typeof(M)
class(M)
# ¿Qué longitud tiene?
length(M)
# ¿Cuáles son sus dimensiones?
dim(M)
v1 <- c(1,2,3)
v2 <- c(4,5,6)
# Creamos la matriz uniendo los dos vectores con cbind()
M <- cbind(v1,v2)
M
typeof(M)
class(M)
# ¿Qué longitud tiene?
length(M)
# ¿Cuáles son sus dimensiones?
dim(M)
v3 <- c("a","b","c")
M <- cbind(M,v3)
M
typeof(M)
class(M)
INDICE  <- c(100,   100,   100,
101.8, 101.2, 100.73,
102.9, 102.4, 103.2)
FECHA  <-  c("Oct-16", "Oct-16", "Oct-16",
"Nov-16", "Nov-16", "Nov-16",
"Dic-16", "Dic-16", "Dic-16")
GRUPO  <-  c("Privado_Registrado","Público","Privado_No_Registrado",
"Privado_Registrado","Público","Privado_No_Registrado",
"Privado_Registrado","Público","Privado_No_Registrado")
Datos <- data.frame(INDICE, FECHA, GRUPO)
Datos
Datos$FECHA
Datos[3,2]
Datos$FECHA[3]
Datos$FECHA[3,2]
superlista <- list(A,B,C,D,E,FECHA, DF = Datos, INDICE, GRUPO)
superlista
superlista$DF$FECHA[2]
for(i in 1:10){
Cuadrados<- i^2
print(Cuadrados)
}
Datos
unique(Datos$GRUPO)
for(variable in unique(Datos$GRUPO)){
print(Datos[Datos$GRUPO == variable,])
}
A <- 'Esto no es una cadena de caracteres'
B <- factor('Esto no es una cadena de caracteres')
# Condicional simple
if (class(A) == "character") {
paste0("No le crean, esto es una cadena de caracteres")
}
# Condicional simple
if (class(B) == "character") {
paste0("No le crean, esto es una cadena de caracteres")
}
# Condicional exhaustivo
if (class(B) == "character") {
paste0("No le crean, esto es una cadena de caracteres")
} else {paste0("Esta chequeado, esto NO es una cadena de caracteres")}
ifelse(test = class(A) == "character", yes =  paste0("Esto es un caracter"),
no = paste0("Esto no era un caracter"))
funcion_prueba <- function(a,b) {
print(paste(a, b, sep = " "))
}
funcion_prueba(a = "Soy la primera parte de un string.", b = "Y yo la segunda parte")
funcion_prueba <- function(a = "Soy un default.",b) {
print(paste(a, b, sep = " "))
}
funcion_prueba(b = " A mi me tenes que asignar")
funcion_prueba(a='Lo puedo asignar?', b='Obvio')
m1 <- matrix(c(9,2,4,8), nrow = 2, ncol = 2)
m2 <- matrix(c(10,1,5,7,9,17), nrow = 3, ncol = 2)
(function(x) x*2)(10)
# Armamos un dataframe con la recaudación en millones de dolares de la trilogía de Batman de Nolan
USA  <- c(207,   535,   448)
Mundo <- c(167,   470,   636)
pelis  <-  c("Batman Begins", "Dark Knight", "Dark Knight Rises")
batman <- data.frame(USA, Mundo, row.names = pelis)
batman
# ¿Cuanto recaudó cada película?
apply(X=batman, MARGIN =1 , FUN=sum)
# ¿Cuanto recaudó en promedio la trilogía por área?
apply(X=batman, MARGIN =2 , FUN=mean)
# ¿Cuanto recaudó cada película en pesos argentinos?
apply(X=batman, MARGIN =1 , FUN=sum*30.4)
# Funciones anónimas al rescate
apply(X=batman, MARGIN =1 , FUN=function(x) sum(x)*30.4)
x <- 1:15
y <- list(a = 1, b = TRUE, c = "oops")
#Para guardar
save(x, y, file = "xy.RData")
#Para leer
load('xy.RData')
x
saveRDS(x, "x.RDS")
Z <- readRDS("x.RDS")
Z
individual_t117 <- read.table('../Fuentes/usu_individual_t117.txt',sep=";", dec=",", header = TRUE, fill = TRUE)
individual_t117
# install.packages("xlsx") # por única vez
library(xlsx) #activamos la librería
#creamos una tabla cualquiera de prueba
x <- 1:10
y <- 11:20
tabla_de_R <- data.frame(x,y)
# escribimos el archivo
write.xlsx( x = tabla_de_R, file = "archivo.xlsx",sheetName = "hoja 1",row.names = FALSE)
#leemos el archivo
tabla <- read.xlsx(file = "archivo.xlsx",sheetName = "hoja 1")
tabla
#tabla <- read.xlsx(file = archivo_datos,sheetName = "hoja 1") #como es una variable, ya no lleva comillas
#install.packages(rstudioapi)
script.dir <- paste0(dirname(rstudioapi::getActiveDocumentContext()$path),"/")
bases.dir  <-  paste0(dirname(script.dir),"/Fuentes/")
#dir.create(bases.dir)
resultados.dir <- paste0(dirname(script.dir),"/Resultados/")
#dir.create(resultados.dir)
#chequeo
dir.exists(bases.dir)
dir.exists(resultados.dir)
#install.packages(rstudioapi)
script.dir <- paste0(dirname(rstudioapi::getActiveDocumentContext()$path),"/")
bases.dir  <-  paste0(dirname(script.dir),"Fuentes/")
#dir.create(bases.dir)
resultados.dir <- paste0(dirname(script.dir),"Resultados/")
#dir.create(resultados.dir)
#chequeo
dir.exists(bases.dir)
dir.exists(resultados.dir)
script.dir
bases.dir
bases.dir  <-  paste0(dirname(script.dir),"/Fuentes/")
bases.dir
bases.dir
#chequeo
dir.exists(bases.dir)
dir.exists(resultados.dir)
#dir.create(bases.dir)
resultados.dir <- paste0(dirname(script.dir),"/Resultados/")
resultados.dir
#chequeo
dir.exists(bases.dir)
dir.exists(resultados.dir)
#install.packages(rstudioapi)
script.dir <- paste0(dirname(rstudioapi::getActiveDocumentContext()$path),"/")
bases.dir  <-  paste0(dirname(script.dir),"/Fuentes/")
#dir.create(bases.dir)
resultados.dir <- paste0(dirname(script.dir),"/Resultados/")
#dir.create(resultados.dir)
#chequeo
dir.exists(bases.dir)
dir.exists(resultados.dir)
#install.packages(rstudioapi)
script.dir <- paste0(dirname(rstudioapi::getActiveDocumentContext()$path),"/")
bases.dir  <-  paste0(dirname(script.dir),"/Fuentes/")
#dir.create(bases.dir)
resultados.dir <- paste0(dirname(script.dir),"/Resultados/")
#dir.create(resultados.dir)
#chequeo
dir.exists(bases.dir)
dir.exists(resultados.dir)
#install.packages(rstudioapi)
script.dir <- paste0(dirname(rstudioapi::getActiveDocumentContext()$path),"/")
bases.dir  <-  paste0(dirname(script.dir),"/Fuentes/")
#dir.create(bases.dir)
resultados.dir <- paste0(dirname(script.dir),"/Resultados/")
#dir.create(resultados.dir)
#chequeo
dir.exists(bases.dir)
dir.exists(resultados.dir)
setwd('/home/juan/EEA/Fuentes/')
library(lubridate)
library(dplyr)
library(tidyr)
ipc = read.csv('ipc-mensual.csv')
dolar = read.csv('dolar-diario.csv')
dolar = dolar %>% rename(tipo_cambio = Tipo.de.Cambio.de.Referencia...en.Pesos...por.Dólar)
dolar = dolar %>% mutate(date=dmy(Fecha), year=year(date), month=month(date),
day=day(date))
fecha_cotizacion= dolar%>% group_by(year,month) %>%
summarise(day=min(day))
dolar = dolar %>% inner_join(fecha_cotizacion, by=c('year', 'month', 'day'))
ipc= ipc %>% gather(., key   = date, value = ipc, 2:29)
ipc= ipc %>% mutate(date=parse_date_time(date, orders = 'my'),
year=year(date), month=month(date))
joined_data=ipc %>% inner_join(dolar, by=c('year', 'month'))
colnames(joined_data)
glimpse(joined_data)
